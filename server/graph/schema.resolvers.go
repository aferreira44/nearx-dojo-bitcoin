package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"server/graph/model"
)

// GetBalanceByAddress is the resolver for the getBalanceByAddress field.
func (r *queryResolver) GetBalanceByAddress(ctx context.Context, address string) (*model.BalanceResponse, error) {
	// Create an HTTP client
	client := &http.Client{}

	// Get environment variables
	nodeURL := os.Getenv("BITCOIN_NODE_URL")
	if nodeURL == "" {
		nodeURL = "http://localhost:18443" // fallback
	}

	nodeUser := os.Getenv("BITCOIN_NODE_USER")
	nodePass := os.Getenv("BITCOIN_NODE_PASS")

	// Create the request body
	requestBody := map[string]interface{}{
		"jsonrpc": "1.0",
		"id":      "curltest",
		"method":  "listunspent",
		"params":  []interface{}{0, 9999999, []string{address}},
	}

	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return nil, fmt.Errorf("error marshaling request: %v", err)
	}

	// Create the request with the environment URL
	req, err := http.NewRequest("POST", nodeURL, bytes.NewBuffer(jsonBody))
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Set basic auth headers using environment variables
	req.SetBasicAuth(nodeUser, nodePass)
	req.Header.Set("Content-Type", "application/json")

	// Make the request
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error making request: %v", err)
	}

	defer resp.Body.Close()

	// Read and parse the response
	var response struct {
		Result []struct {
			Amount float64 `json:"amount"`
		} `json:"result"`
		Error interface{} `json:"error"`
	}

	if err := json.NewDecoder(resp.Body).Decode(&response); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}

	// Calculate total balance
	var totalBalance float64
	for _, utxo := range response.Result {
		totalBalance += utxo.Amount
	}

	// Convert to satoshis (1 BTC = 100,000,000 satoshis)
	balanceInSatoshis := int32(totalBalance * 100000000)

	return &model.BalanceResponse{
		Address: address,
		Balance: balanceInSatoshis,
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
