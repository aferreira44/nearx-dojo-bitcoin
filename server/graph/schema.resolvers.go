package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"
	"server/graph/model"
	"server/internal/rpc"
)

// GetBalanceByAddress is the resolver for the getBalanceByAddress field.
func (r *queryResolver) GetBalanceByAddress(ctx context.Context, address string) (*model.BalanceResponse, error) {
	client := rpc.NewRpcClient()

	var response struct {
		Result []struct {
			Amount float64 `json:"amount"`
		} `json:"result"`
		Error interface{} `json:"error"`
	}

	err := client.Call("listunspent", []interface{}{0, 9999999, []string{address}}, &response)
	if err != nil {
		return nil, fmt.Errorf("RPC call failed: %v", err)
	}

	// Calculate total balance
	var totalBalance float64
	for _, utxo := range response.Result {
		totalBalance += utxo.Amount
	}

	// Convert to satoshis (1 BTC = 100,000,000 satoshis)
	balanceInSatoshis := int32(totalBalance * 100000000)

	return &model.BalanceResponse{
		Address: address,
		Balance: balanceInSatoshis,
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
